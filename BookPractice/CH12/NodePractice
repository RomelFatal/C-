#include <iostream>
using namespace std;

class IntNode {
public:
    IntNode (int dataInit = 0, IntNode* nextLoc = nullptr);
    void InsertAfter(IntNode* nodeLoc);
    IntNode* GetNext();
    void PrintNodeData();
private:
    int dataVal;
    IntNode* nextNodePtr;
};

// Constructor
IntNode::IntNode(int dataInit, IntNode* nextLoc) {
    this->dataVal = dataInit;
    this->nextNodePtr = nextLoc;
}

/* Insert node after this node.
 * Before: this -- next
 * After:  this -- node -- next
 * */
void IntNode::InsertAfter(IntNode* nodeLoc) {
    IntNode* tmpNext = nullptr;

    tmpNext = this->nextNodePtr;        // Remember next
    this->nextNodePtr = nodeLoc;        // this -- node -- ?
    nodeLoc->nextNodePtr = tmpNext;     // this -- node -- next
}

// Print dataVal
void IntNode::PrintNodeData() {
    cout << this->dataVal << endl;
}

// Grab location pointed by nextNodePtr
IntNode* IntNode::GetNext() {
    return this->nextNodePtr;
}

int main() {
    IntNode* headObj  = nullptr;  // Create IntNode objects
    IntNode* nodeObj1 = nullptr;
    IntNode* nodeObj2 = nullptr;
    IntNode* nodeObj3 = nullptr;
    IntNode* currObj  = nullptr;


    /* This block of code is added
     * as additional code to the first example
     * */
    IntNode* lastObj = nullptr;
    int i;                          // Loop index

    headObj = new IntNode(-1);
    lastObj = headObj;

    for (i = 0; i < 20; i++) {                  // Append 20 rand nums
        currObj = new IntNode(rand());

        lastObj->InsertAfter(currObj);  // Append curr
        lastObj = currObj;                      // Curr is the new last item
    }

    // Print linked list
    currObj = headObj;
    while (currObj != nullptr) {
        currObj->PrintNodeData();
        currObj = currObj->GetNext();
    }

    return 0;
}
